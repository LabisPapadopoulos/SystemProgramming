server.c
========
Υλοποίηση του haystack server.

main:
-----
Η συνάρτηση main ξεκινάει τον server. Δηλαδή παρσάρει τα ορίσματα, ορίζει την συνάρτηση terminate για διαχείριση του σήματος SIGINT (Ctrl-C), καλεί την initialize για να φορτώσει το haystack αρχείο που έδωσε ο χρήστης, δημιουργεί ένα socket (με χρήση της socket) και το ανοίγει στην πόρτα που έδωσε ο χρήστης (bind) και περιμένει για εισερχόμενες αιτήσεις (με την listen). Για κάθε client που συνδέεται (με την accept) δημιουργεί ένα καινούριο Thread (με την pthraed_create), το οποίο αποθηκεύεται σε μια απλά συνδεδεμένη λίστα και εκτελεί την συνάρτηση serve.

serve:
------
Η συνάρτηση serve παίρνει σαν όρισμα το socket του client (κασταρισμένο σε void *) και επιστρέφει πάντα NULL (επειδή επιστρέφει void *). Αναλαμβάνει να εξυπηρετήσει τον κάθε client. Καλεί την parseRequest για να παρσάρει την αίτηση (request) ενός client. Άν ο client ζητάει ανέβασμα φωτογραφίας (upload), τότε καλέι την addNeedle για να προσθέσει την φωτογραφία στο haystack αρχείο. Άν η εικόνα ανέβηκε επιτυχώς απαντάει στον client (με την συνάρτηση sendResponse) με μήνυμα 200 OK και του στέλνει και το νέο id της εικόνας. Άν ζητήθηκε κατέβασμα εικόνας (download) τότε καλεί την συνάρτηση searchNeedle για να αναζητήσει αυτή την εικόνα στο haystack αρχείο. Άν η εικόνα βρεθεί, την στέλνει στον client με ένα μήνυμα 200 ΟΚ (με την sendResponse), ενώ αν δεν βρεθεί απαντάει με μήνυμα 404 Not Found. Άν ο client ζητάει την διαγραφή μιας εικόνας τότε καλείται η removeNeedle για την διαγραφή της. Άν η διαγραφή γίνει επιτυχώς τότε απαντάει στον client με μήνυμα 200 ΟΚ, ενώ αν η εικόνα δεν υπάρχει στέλνει μήνυμα 404 Not Found.
Αν υπάρχει οποιδήποτε πρόβλημα με το request του client τότε απαντάει με 400 Bad Request (με την sendResponse πάλι), ενώ αν συμβεί οποιοδήποτε εσωτερικό σφάλμα στον server απαντάει με 500 Internal Server Error (με την sendResponse).
Τέλος κλείνει το socket του client.

logTime:
--------
Βοηθητική συνάρτηση που τυπώνει την τρέχουσα ημερομηνία και ώρα (με τις συναρτήσεις time, ctime) στο stderr.

terminate:
----------
Καλείται κατα τον τερματισμό του server (είτε λόγω σήματος Ctrl-C είτε λόγω σφάλματος). Κλείνει το αρχικό socket για να μην δέχεται νέες αιτήσεις ο server και μετά περιμένει να τερματίσουν όλα τα νήματα (με την συνάρτηση pthread_join) που βρίσκονται στην απλά συνδεδεμένη λίστα του server, την οποία και αποδεσμεύει. Τέλος καλεί την συνάρτηση finalize για να καθαρίσει τις δομές του haystack αρχείου.


http.c
======
Υλοποίηση του http πρωτοκόλλου.

parseRequest:
-------------
Παρσάρει ένα http request. Δέχεται σαν ορίσματα το socket απο το οποίο θα διαβάσει το request και δείκτες για να αποθηκεύσει το id, τον host, το content length και τα binary data που πιθανώς υπάρχουν στο αίτημα του client. Επιστρέφει έναν ακέραιο, ο οποίος είναι UPLOAD, DOWNLOAD ή DELETE ανάλογα με τι ζήτησε ο client ή BAD_REQUEST, αν υπάρχει πρόβλημα με το request του client ή SERVER_ERROR, αν συμβεί οποιοδήποτε σφάλμα.
Διαβάζει δεδομένα απο το socket τα οποία αποθηκεύει σ' ένα εσωτερικό buffer και καλεί διαδοχικά τις parseRequestLine και parseHeaderLine για να τα καταναλώσει. Το τμήμα του buffer που δεν θα χρησιμοποιηθεί από μια συνάρτηση μεταφέρεται στην αρχή του buffer (με χρήση της memmove) και το υπόλοιο συμπληρώνεται με νέα δεδομένα απο το socket (με χρήση της read). Στο τέλος όταν βρεθούν όλες οι http επικεφαλίδες του request όσα δεδομένα έχουν απομείνει στο buffer, μαζί με όσα δοδομένα έχουν απομείνει στο socket αποθηκεύονται στα binary data τα οποία έχουν δεσμευτεί γι' αυτό το σκοπό με μέγεθος content length.

parseRequestLine:
-----------------
Η συνάρτηση parseRequestLine παρσάρει την πρώτη γραμμή ενός request. Παίρνει σαν ορίσματα το buffer απο το οποίο θα διαβάζει, ένα δείκτη μέσα στο buffer για το τέλος της πρώτης γραμμής (\r\n) και ένα δείκτη που θα αποθηκεύσει το τυχόν id του request. Επιστρέφει έναν ακέραιο ανάλογα με το είδος του request, ο οποίος θα είναι UPLOAD, DOWNLOAD, DELETE ή BAD_REQUEST. Το request θα πρέπει να έχει μια απο τις παρακάτω μορφές:
1) GET /?id=ID HTTP/1.0 (για κατέβασμα)
2) GET /?d_id=ID HTTP/1.0 (για διαγραφή)
3) POST / HTTP/1.0 (για ανέβασμα)

parseHeaderLine:
----------------
Παρσάρει ένα http header (μετά την πρώτη γραμμή του request). Παίρνει σαν ορίσματα το buffer απο το οποίο θα διαβάζει, ένα δείκτη μέσα στο buffer για το τέλος της επικεφαλίδας (\r\n), ένα δείκτη στον οποίο θα αποθηκεύσει το όνομα της επικεφαλίδας και ένα δείκτη που θα αποθηκεύσει την τιμή της. Επιστρέφει 0, όταν δεν υπάρχει άλλη επικεφαλίδα (όταν συναντήσει δυο διαδοχικά \r\n), 1 όταν βρεθεί η επικεφαλίδα και SERVER_ERROR, αν συμβεί οποιοδήποτε σφάλμα. Η επικεφαλίδα θα πρέπει να έχει την μορφή:
ΟΝΟΜΑ: ΤΙΜΗ

sendResponse:
-------------
Στέλνει μια http απάντηση στον client. Παίρνει σαν ορίσματα το socket που θα γράψει, το είδος του request για το οποίο θα απαντήσει (UPLOAD, DOWNLOAD, DELETE, NOT_FOUND, BAD_REQUEST, SERVER_ERROR) και προαιρετικά id, content length και binary data που θα περιέχει η απάντηση. Επιστρέφει 0 σε περίπτωση επιτυχίας, -1 σε περίπτωση σφάλματος.

haystack.c
==========
Διαχείριση ενός haystack αρχείου.

initialize:
-----------
Αρχικοποιεί ένα haystack αρχείο. Παίρνει σαν όρισμα το όνομα του haystack αρχείου. Επιστρέφει τα needles που βρέθηκαν μέσα σ' αυτό το αρχείο, -2 αν το αρχείο δεν είναι haystack και -1 αν συμβεί οποιοδήποτε σφάλμα. Αρικά ανοίγει το αρχείο μόνο για διάβασμα για να ελέγξει αν υπάρχει ήδη το αρχείο. Άν δεν υπάρχει, το δημιουργεί και του γράφει το magic number. Μετά ανοίγει το αρχείο για διάβασμα, ελέγχει το magic number του και καλεί την compact και την copyFile για να το συμπτύξει, χρησιμοποιώντας ενδιάμεσα ένα προσωρινό αρχείο. Τέλος καλεί την initializeSemaphore για να αρχικοποιήσει τον σημαφόρο που θα χρησιμοποιηθεί για την πρόσβαση στο αρχείο.

finalize:
---------
Κλείνει το αρχείο haystack, απελευθερώνει την μνήμη που καταλάμβανε η δομή του ευρετηρίου και αποδεσμεύει και τον σημαφόρο.

addNeedle:
----------
Προσθέτει μια καινούρια εικόνα μέσα στο haystack αρχείο. Παίρνει σαν όρισμα το μέγεθος (length) και τα binary data της εικόνας και επιστρέφει το νέο id της εικόνας ή -1 σε περίπτωση σφάλματος.
Αρχικά κατεβάζει τον σημαφόρο για να εξασφαλίσει την ατομική προσπέλαση στο αρχείο και προσθέτει ένα header με τα μεταδεδομένα της εικόνας, ακολουθούμενο απο τα δεδομένα στο τέλος του αρχείου haystack. Μετά δεσμεύει ένα νέο κόμβο ευρετηρίου, τον γεμίζει με τα μεταδεδομένα της εικόνας και τον προσθέτει στην απλά συνδεδεμένη λίστα του ευρετηρίου. Τέλος ανεβάζει τον σημαφόρο.

searchNeedle:
-------------
Αναζητά μια εικόνα στο haystack αρχείο. Παίρνει σαν όρισμα το id της εικόνας και δυο δείκτες στους οποίους θα αποθηκεύσει το μέγεθος και τα binary data της εικόνας. Επιστρέφει -1 σε περίπτωση σφάλματος, 0 αν δεν βρεθεί η εικόνα και 1 αν βρέθηκε η εικόνα. Αρχικά κατεβάζει τον σημαφόρο για να μπορεί να κάνει την αναζήτηση στο αρχείο haystack ατομικά και ψάχνει σειριακά στην απλά συνδεδεμένη λίστα του ευρετηρίου να βρεί τον κόμβο με το id που δόθηκε. Μόλις το βρεί, μετακινείται στην αντίστοιχη θέση (offset) μέσα στο haystack αρχείο, διαβάζει το header για να βρεί το μέγεθος της εικόνας και αμέσως μετά διαβάζει και τα binary data της εικόνας που ακολουθούν. Τέλος ανεβάζει τον σημαφόρο.

removeNeedle:
-------------
Διαγράφει μια εικόνα απο το haystack αρχείο. Παίρνει σαν όρισμα το id της εικόνας και επιστρέφει -1 σε περίπτωση σφάλματος, 1 αν διέγραψε την εικόνα επιτυχώς ή 0 αν δεν βρήκε την εικόνα. Αρχικά κατεβάζει τον σημαφόρο, ψάχνει σειριακά την απλά συνδεδεμένη λίστα του ευρετηρίου και μόλις βρεί τον κόμβο με το id που δόθηκε, μετακινείται στην αντίστοιχη θέση (offset) μέσα στο haystack αρχείο, διαβάζει το header, θέτει το πεδίο status του σε 0 και το ξανάγράφει πίσω στην ίδια θέση. Στη συνέχεια αφαιρεί τον κόμβο από τη μονά συνδεδεμένη λίστα και αποδεσμεύει την μνήμη που καταλάμβανε. Τέλος ανεβάζει τον σημαφόρο.

compact:
--------
Συμπτύσει ένα haystack αρχείο σ' ένα άλλο, απαλοίφοντας τον αχρησιμοποίητο χώρο που έχει προκύψει σε αυτό από πιθανές διαγραφές, ενώ παράλληλα φορτώνει τα needles που περιέχει στο ευρετήριο. Παίρνει σαν ορίσματα δυο δείκτες σε αρχεία, ένα εισόδου και ένα εξόδου και επιστρέφει -1 σε περίπτωση σφάλματος ή το πλήθος των έγκυρων needles (μη διεγραμμένων) που βρέθηκαν στο αρχείο εισόδου. Αρχικά αντιγράφει τον magic number από το αρχείο εισόδου στο αρχείο εξόδου και για κάθε επικεφαλίδα που βρίσκει στο αρχείο εισόδου ελέγχει άν είναι έγκυρη (status = 1) και άν ναι, την αντιγράφει στο αρχείο εξόδου μαζί με τα αντίστοιχα binary data χρησιμοποιώντας ένα δυναμικό buffer. Στη συνέχεια δημιουργεί ένα νέο κόμβο ευρετηρίου τον οποίο γεμίζει με τα μεταδεδομένα της εικόνας και τον εισάγει στην αρχή της μονά συνδεδεμένης λίστας του ευρετηρίου. Άν όμως το needle έχει διαγραφεί (status = 0) τότε απλά το προσπερνάει.

copyFile:
---------
Αντιγράφει ένα αρχείο σ' ένα άλλο (Χρησιμοποιείται για να αντιγράψει το συνεπτυγμένο αρχείο στο αρχικό haystack). Παίρνει σαν ορίσματα δυο δείκτες σε αρχεία, το ένα εισόδου και το άλλο εξόδου. Επιστρέφει -1 σε περίπτωση σφάλματος ή 0 αν η αντιγραφή ολοκληρώθηκε επιτυχώς. Χρησιμοποιώντας ένα στατικό buffer, αντιγράφει δεδομένα (bytes) απο το αρχείο εισόδου στο αρχείο εξόδου.

semaphore.c
===========
Διαχείρηση σημαφόρου.

initializeSemaphore:
--------------------
Αρχικοποίηση του σημαφόρου με χρήση της συνάρτησης pthread_mutex_init. Επιστρέφει -1 σε περίπτωση σφάλματος ή 0 αν όλα πήγαν καλά.

up:
---
Ανεβάζει τον σημαφόρο με χρήση της συνάρτησης pthread_mutex_unlock. Επιστρέφει -1 σε περίπτωση σφάλματος ή 0 αν όλα πήγαν καλά.

down:
-----
Κατεβάζει τον σημαφόρο με χρήση της συνάρτησης pthread_mutex_lock. Επιστρέφει -1 σε περίπτωση σφάλματος ή 0 αν όλα πήγαν καλά.

finalizeSemaphore:
------------------
Αποδεσμεύει τον σημαφόρο με χρήση της συνάρτησης pthread_mutex_destroy. Επιστρέφει -1 σε περίπτωση σφάλματος ή 0 αν όλα πήγαν καλά.

