Το πρόγραμμα mycache χρησιμοποιεί μια διπλά συνδεδεμένη λίστα για να κρατά ταξινομημένες τις εγγραφές κατά χρόνο τελευταίας προσπέλασης σύμφωνα με την LRU. Για να επιταχυνθεί η αναζήτηση οι κόμβοι της διπλά συνδεδεμένης λίστας εισάγονται και σ' έναν πίνακα κατακερματισμού, στον οποίο για την επίλυση των συγκρούσεων χρησιμοποιεί απλά συνδεδεμένες λίστες.

Η αναζήτηση μιας εγγραφής στη CACHE γίνεται μέσω του hashtable, οπότε απαιτείται χρόνος O(1+α), με α τον παράγοντα φόρτου του πίνακα κατακερμαστιμού (load factor). Ο παράγοντας φόρτου α εκφράζει το μέσο πλήθος εγγραφών ανα θέση του πίνακα κατακερματισμού και ορίζεται σαν n/m, όπου n οι εγγραφές που περιέχει ο πίνακας κατακερματισμού και m το μέγεθός του πίνακα κατακερματισμού. (κεφ 4.3.2 σημειώσεις αλγορίθμων και πολυπλοκότητας). Επειδή στην περίπτωσή μας είναι n = m, θα έχουμε α = 1. Άρα η συνολική πολυπλοκότητα της αναζήτησης θα είναι Ο(1+1) = Ο(1). 

Η εισαγωγή μιας εγγραφής στην CACHE απαιτεί την εισαγωγή της στην διπλά συνδεδεμένη λίστα η οποία παίρνει χρόνο O(1) επειδή η εισαγωγή γίνεται πάντα στην αρχή. Επίσης απαιτείται η εισαγωγή της στον πίνακα κατακερματισμού. Αυτή χρειάζεται χρόνο Ο(1) για τον κατακερματισμό (εύρεση της κατάλληλης θέσης - κεφ 4.3.2 σημειώσεις αλγορίθμων και πολυπλοκότητας) και μετά πάλι χρόνο Ο(1) για την εισαγωγή του κόμβου στην αρχή της αντίστοιχης απλά συνδεδεμένης λίστας. Συνολικά η εισαγωγή μιας εγγραγής στην CACHE απαιτεί χρόνο Ο(1).

Η διαγραφή μιας εγγραφής απο την CACHE όταν αυτή ξεπεράσει το επιτρεπτό μέγεθος γίνεται πάντα απο το τέλος της διπλά συνδεδεμένης λίστας, οπότε χρειάζεται χρόνο Ο(1). Για να αφαιρεθεί και από τον πίνακα κατακερματισμού, γίνεται αναζήτηση σε χρόνο Ο(1) και μόλις βρεθεί διαγράφεται και απο την απλά συνδεδεμένη λίστα σε χρόνο Ο(1). Συνολικά η διαγραφή γίνεται σε χρόνο Ο(1).

Η αναζήτηση στο αρχείο γίνεται σειριακά οπότε παίρνει χρόνο O(n), όπου n το πλήθος των εγγραφών που περιέχονται στο αρχείο.

==== cache.c ====
hash_function: Η hash_function επιστρέφει το υπόλοιπο της διαίρεσης του τηλεφώνου με το μέγεθος του πίνακα κατακερματισμού που είναι και το συνολικό μέγεθος της CACHE. Η συνάρτηση κατακερματισμού ακολουθεί την μέθοδο της διαίρεσης (Κεφ 4.4.1, σημειώσεις αλγορίθμων και πολυπλοκότητας).

initialize: Δεσμεύει τον πίνακα κατακερματισμού με μέγεθος όσο το μέγιστο πλήθος των εγγραφών που θα χωράει η CACHE και αρχικοποιεί την διπλά συνδεδεμένη λίστα σε κενή. Επίσης κρατάει και τον δείκτη στο αρχείο στο οποίο θα αναζητούνται οι εγγραφές που δεν υπάρχουν στη CACHE.

search: Αναζητά μια εγγραφή με βάση τον αριθμό του τηλεφώνου. Αρχικά καλεί την συνάρτηση κατακερματισμού με όρισμα τον αριθμό του τηλεφώνου και σαρώνει σειριακά την απλά συνδεδεμένη λίστα στην αντίστοιχη θέση του πίνακα κατακερματισμού, ψάχνοντας τον κόμβο της διπλά συνδεδεμένης λίστας στον οποίο περιέχεται η αντίστοιχη εγγραφή. Αν η εγγραφή βρεθεί μετακινείται απο την θέση που βρίσκεται στην αρχή της διπλά συνδεδεμένης λίστας προκειμένου να ακολουθηθούν οι ιδιότητες της LRU, αφού σίγουρα είναι αυτή που χρησιμοποιήθηκε πιο πρόσφατα. Αντιγράφει τα δεδομένα της εγγραφής στον δείκτη record που της δόθηκε και επιστρέφει 1 (Εγγραφή βρέθηκε). 
Αν η εγγραφή δεν βρεθεί μέσα στην CACHE, τότε σαρώνει σειριακά το αρχείο. Αν η εγγραφή δεν βρεθεί ούτε στο αρχείο, η συνάρτηση επιστρέφει 0 (Η εγγραφή δεν βρέθηκε).
Αν η εγγραφή βρεθεί στο αρχείο τότε εισάγεται στην αρχή της διπλα συνδεδεμένης λίστας και ο κόμβος που την περιέχει εισάγεται και στο hashtable τοποθετώντας τον στην αρχή της απλά συνδεδεμένης λίστας στην αντίστοιχη θέση του πίνακα κατακερματισμού.
Τέλος αν έχουμε υπερβεί το επιτρεπτό μέγεθος της CACHE με την εγγραφή που μόλις εισάγαμε, διαγράφουμε την τελευταία εγγραφή απο την διπλά συνδεδεμένη λίστα επειδή είναι η πιο παλιά σύμφωνα με την LRU. Ο κόμβος αυτής της εγγραφής διαγράφεται και από το hashtable αφαιρώντας τον από την απλά συνδεδεμένη λίστα της αντίστοιχης θέσης.

finalize: Αποδεσμεύει τη μνήμη που καταλαμβάνει η διπλά συνδεδεμένη λίστα, οι μονά συνδεδεμένες λίστες που περιέχονται στον πίνακα κατακερματισμού και ο ίδιος ο πίνακας κατακερματισμού.

